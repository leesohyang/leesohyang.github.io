---
layout: post
title:  "[삼성 SW 역량테스트] 14499"
subtitle:   "[삼성 SW 역량테스트] 14499"
categories: algorithm language 
tags: algorithm language C++
comments: true
---


## 문제 
---
주사위 굴리기 문제이다. 

<https://www.acmicpc.net/problem/14499>

주사위에 절대적인 index를 부여해서 풀면 된다. 주사위 윗면이 0, 밑면이 5, 왼쪽면 4, 오른쪽면 2, 앞면 1, 뒷면 3

## 코드
---



    '''c
	#include <iostream>
	#include<fstream>
	#include <vector>
	#include<iostream>
	#include <algorithm>
	#include <deque>
	#include<queue>
	//#include <bits/stdc++.h>
	using namespace std;
	const int MAX = 20;
	const int DICE = 6;
	int N, M, a, b, orders;
	int board[MAX][MAX];
	int dice_value[DICE] = { 0, 0, 0, 0, 0, 0 };
	int dice_index[DICE] = { 1, 5, 3, 2, 4, 6 }; 
	int dir[4][2] = { {0,1}, {0, -1}, {-1,0}, {1, 0} }; //동서북남
	
	struct Dice_locate {
	    int x, y;
	};
	
	void shift(int x) {
	    int sub = dice_index[0];
	    switch (x) {
	    case 1://동쪽
	        dice_index[0] = dice_index[4];
	        dice_index[4] = dice_index[5];
	        dice_index[5] = dice_index[2];
	        dice_index[2] = sub;
	        break;
	        // 서
	    case 2:
	        dice_index[0] = dice_index[2];
	        dice_index[2] = dice_index[5];
	        dice_index[5] = dice_index[4];
	        dice_index[4] = sub;
	        break;
	        // 북
	    case 3:
	        dice_index[0] = dice_index[1];
	        dice_index[1] = dice_index[5];
	        dice_index[5] = dice_index[3];
	        dice_index[3] = sub;
	        break;
	        // 남
	    case 4:
	        dice_index[0] = dice_index[3];
	        dice_index[3] = dice_index[5];
	        dice_index[5] = dice_index[1];
	        dice_index[1] = sub;
	        break;
	    default:
	        printf("error!!");
	        break;
	    }
	
	}
	int main(void)
	{
	
	    ios_base::sync_with_stdio(false);
	    ifstream cin;
	    cin.open("input.txt");
	    Dice_locate dice;
	    cin >> N >> M >> a >> b >>orders;
	    dice.x = a;
	    dice.y = b; //처음 위치 저장
	    for (int i = 0; i < N; i++) {
	        for (int j = 0; j < M; j++) {
	            cin >> board[i][j];
	        }
	    }
	    for (int i = 0; i < orders; i++) {
	        int order;
	        cin >> order;
	        int x = dice.x;
	        int y = dice.y;
	        int xx = x + dir[order-1][0];
	        int yy = y + dir[order-1][1];
	        if (xx < 0 || xx >= N || yy < 0 || yy >= M) continue;
	        shift(order);
	        if (board[xx][yy] == 0) board[xx][yy] = dice_value[dice_index[5]-1];
	        else if (board[xx][yy] != 0) dice_value[dice_index[5]-1] = board[xx][yy], board[xx][yy] = 0;
	        dice.x = xx;
	        dice.y = yy;
	        cout << dice_value[dice_index[0]-1] << endl;
	
	    }
	    
	    return 0;
	
	}
    '''

