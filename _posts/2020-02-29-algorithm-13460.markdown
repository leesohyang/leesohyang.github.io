---
layout: post
title:  "[삼성 SW 역량테스트] 13460"
subtitle:   "[삼성 SW 역량테스트] 13460"
categories: algorithm language 
tags: algorithm language C++
comments: true
---


## 문제 
---
<https://www.acmicpc.net/submit/13460/18053527>
구슬굴리기2 

가능한 경우의 수로 가지를 쳐 나가면서( while (qsize--) ), 구멍에 들어간 경우의 트리 깊이를 출력하면 그것이 판을 움직인 횟수이다.<--BFS문제에서 dis배열 역할을 ans++가 수행.

또한 이 문제에서 여느 BFS문제처럼의 ch배열 확인은 4차원 배열로 하도록 했다.ch[rx][ry][bx][by] 이렇게.!

_이해가 안되는거...구슬 두개의 위치가 같아진 경우 원래 위치랑 대조해서 개별적으로 처리를 해주는데, 둘다 빠진 경우는 논외다(continue로 처리함). 물리적으로 생각해보면 납득이 가긴 한다._

BFS, DFS 문제가 헷갈리는데, 이 문제처럼 성공할때까지의 움직인 횟수(최단거리와 비슷)를 구하는건 BFS고 2048(easy)와 같이 판을 움직이는 횟수가 정해져있고 그 경우에서의 최대값. 최소 비용 이런거 구하는거는 DFS이다.  

## 코드
---



    '''c
	#include <string>
	#include <vector>
	#include <algorithm>
	#include <iostream>
	#include <fstream>
	#include <queue>
	using namespace std;
	int N, M, ans = 0;
	char map[11][11];
	int visit[11][11][11][11];
	int dir[4][2] = { {-1, 0}, {0, 1}, {1, 0}, {0, -1} };
	queue<int> rx, ry, bx, by;
	
	int main(){
	    ios_base::sync_with_stdio(false);
	    ifstream cin;
	 
	    cin.open("input.txt");
	    cin >> N >> M;
	    
	    for(int i = 0; i < N; i++){
	        for (int j = 0; j < M; j++) {
	            cin >> map[i][j];
	            if (map[i][j] == 'R') rx.push(i), ry.push(j);
	            if (map[i][j] == 'B') bx.push(i), by.push(j);
	        }
	    }
	    visit[rx.front()][ry.front()][bx.front()][by.front()]=1;
	
	    while (!rx.empty()) {
	        int qsize = rx.size(); //동서남북탐색하는걸 한번으로 보는거지.
	        while (qsize--) { //rx.size만큼 돈다
	            int nrx = rx.front();
	            int nry = ry.front();
	            int nbx = bx.front();
	            int nby = by.front();
	
	            rx.pop(), ry.pop(), bx.pop(), by.pop();
	            if (map[nrx][nry] == 'O') {
	                cout << ans;
	                return 0;
	            }
	            for (int i = 0; i < 4; i++) {
	                int nnrx = nrx;//초기화. 
	                int nnry = nry;
	                int nnbx = nbx;
	                int nnby = nby;
	                int flag = 0;
	                
	                while (map[nnrx + dir[i][0]][nnry + dir[i][1]] != '#' && map[nnrx][nnry] != 'O') { //중요
	                    nnrx += dir[i][0];
	                    nnry += dir[i][1];
	                }
	                while (map[nnbx + dir[i][0]][nnby + dir[i][1]] != '#' && map[nnbx][nnby] != 'O') {
	                    nnbx += dir[i][0];
	                    nnby += dir[i][1];
	
	                    if (map[nnbx][nnby] == 'O') flag = 1;
	                }
	
	                if (nnrx == nnbx && nnry == nnby) { //같아졌을때 
	                    if (i == 0) { //위로 움직였을때
	                        if (nrx > nbx) nnrx += 1;
	                        else nnbx += 1;
	                    }
	                    else if (i == 1) { //오른쪽
	                        if (nry > nby) nnby -= 1;
	                        else nnry -= 1;
	                    }
	                    else if (i == 2) { //아래
	                        if (nrx > nbx) nnbx -= 1;
	                        else nnrx -= 1;
	                    }
	                    else if (i == 3) { //왼쪽
	                        if (nry > nby) nnry += 1;
	                        else nnby += 1;
	                    }
	               
	                }
	                if (flag) continue; //동시에 빠진경우도 포함되는것. 
	                if (visit[nnrx][nnry][nnbx][nnby]) continue;// 여기 중요
	                visit[nnrx][nnry][nnbx][nnby] = 1;
	                rx.push(nnrx), ry.push(nnry), bx.push(nnbx), by.push(nnby); //이래야 큐에 넣어주는것. 
	
	            }
	        }
	        ans++;
	        if (ans > 10) break;
	    }
	    cout << "-1";
	    
	}


    '''

