---
layout: post
title:  "[삼성 SW 역량테스트] 16234"
subtitle:   "[삼성 SW 역량테스트] 16234"
categories: algorithm language 
tags: algorithm language C++
comments: true
---


## 문제 
---


## 코드
---



    '''c
	#include <string>
	#include <vector>
	#include <algorithm>
	#include <iostream>
	#include <fstream>
	#include <queue>
	using namespace std;
	int main(){
	    ios_base::sync_with_stdio(false);
	    int map[50][50];
	    int N,L,R;
	    bool chk = true;
	    int dx[4] = {1,-1,0,0};
	    int dy[4] = {0,0,1,-1};
	    int ans = 0;
	    queue<pair<int,int>> q;      //bfs용
	    queue<pair<int,int>> pos; //연합의 좌표를 저장
	    
	    cin >> N >> L >> R;
	    
	    for(int i = 0; i < N; i++){
	        for(int j = 0; j < N; j++)
	            cin >> map[i][j];
	    }
	    
	    while(chk){ //연합못찾으면 끝나는거 
	        bool visited[50][50] = {}; //다 돌고 나서 ch배열 초기화 
	        chk = false; 
	        ans+=1;
	        for(int i = 0; i < N; i++){
	            for(int j = 0; j < N; j++){ 
	                if(visited[i][j]) continue;
	                int sum = map[i][j]; //초기화
	                q.push({j,i});
	                pos.push({j,i});
	                visited[i][j] = 1; //true
	                
	                while(!q.empty()){ 
	                    int x_tmp = q.front().first;
	                    int y_tmp = q.front().second;
	                    q.pop();
	                    
	                    for(int k = 0; k < 4; k++){
	                        int x = x_tmp+dx[k];
	                        int y = y_tmp+dy[k];
	                        if(x < 0 || y < 0 || x >= N || y >= N || visited[y][x] || abs(map[y_tmp][x_tmp]-map[y][x]) < L ||abs(map[y_tmp][x_tmp]-map[y][x])>R)
	                            continue;
	                        chk = true;
	                        q.push({x,y});
	                        pos.push({x,y});
	                        sum+=map[y][x];
	                        visited[y][x] = 1;
	                    }
	                
	                }
	            
	                
	                int avr = sum/pos.size();
	 
	                while(!pos.empty()){
	                    map[pos.front().second][pos.front().first] = avr;
	                    pos.pop();
	                }
	            }
	        }
	        
	    }
	    cout << ans-1;
	}

    '''

