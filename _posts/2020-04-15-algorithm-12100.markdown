---
layout: post
title:  "[삼성 SW 역량테스트] 12100"
subtitle:   "[삼성 SW 역량테스트] 12100"
categories: algorithm language 
tags: algorithm language C++
comments: true
---


## 문제 
---
2048(easy)

<https://www.acmicpc.net/problem/12100>

## 코드
---



    '''c
	#include <iostream>
	#include<fstream>
	#include <vector>
	#include<iostream>
	#include <algorithm>
	#include <deque>
	#include<queue>
	using namespace std;
	const int MAX = 20;
	
	
	
	int N;
	
	int board[MAX][MAX];
	
	int maxBlock;
	
	//밀기
	void shift(int type)
	
	{
	    queue<int> q;
	
	    //숫자들을 큐에 집어놓고 각 행의
	
	    //해당방향 끝에서부터 숫자를 넣기 시작
	    switch (type)
	    {
	
	        //왼쪽으로 밀기
	    case 0:
	        for (int i = 0; i < N; i++)
	        {
	            for (int j = 0; j < N; j++) //왼쪽에있는 애들부터 큐에 넣기
	            {
	                if (board[i][j])
	                    q.push(board[i][j]);
	                board[i][j] = 0; //싹 초기화 //이런식으로
	            }
	            //한줄씩 왼쪽으로 밀거라서
	            int idx = 0; //idx=현재 빈칸.
	            while (!q.empty())
	            {
	                int data = q.front();
	                q.pop();
	                if (board[i][idx] == 0)
	                    board[i][idx] = data; 
	                else if (board[i][idx] == data)
	                {
	                    board[i][idx] *= 2;
	                    //한번 합쳐지면 그 idx는 끝인거임
	                    idx++;
	                }
	                else //나랑 다른애가 내 왼쪽에 있는경우 그 애 옆에 들어감
	                {
	                    idx++;
	                    board[i][idx] = data;
	                }
	            }
	
	        }
	        break;
	        //오른쪽
	    case 1:
	        for (int i = 0; i < N; i++)
	        {
	            for (int j = N - 1; j >= 0; j--) //오른쪽으로 밀거면 맨 오른쪽에 있는애부터. 
	            {
	                if (board[i][j])
	                    q.push(board[i][j]);
	                board[i][j] = 0;
	            }
	            int idx = N - 1;
	            while (!q.empty())
	            {
	                int data = q.front();
	                q.pop();
	                if (board[i][idx] == 0)
	                    board[i][idx] = data;
	                else if (board[i][idx] == data)
	                {
	                    board[i][idx] *= 2;
	                    idx--;
	                }
	                else
	                {
	                    idx--;
	                    board[i][idx] = data;
	                }
	            }
	        }
	        break;
	        //위쪽
	
	    case 2:
	        for (int i = 0; i < N; i++) //y축이다 이거야.
	        {
	            for (int j = 0; j < N; j++)
	            {
	                if (board[j][i])
	                    q.push(board[j][i]);
	                board[j][i] = 0;
	            }
	            int idx = 0;
	            while (!q.empty())
	            {
	                int data = q.front();
	                q.pop();
	                if (board[idx][i] == 0)
	                    board[idx][i] = data;
	                else if (board[idx][i] == data)
	                {
	                    board[idx][i] *= 2;
	                    idx++;
	                }
	                else
	                {
	                    idx++;
	                    board[idx][i] = data;
	                }
	            }
	        }
	        break;
	        //아래쪽
	
	    case 3:
	        for (int i = 0; i < N; i++) //y축
	        {
	            for (int j = N - 1; j >= 0; j--)
	            {
	                if (board[j][i])
	                    q.push(board[j][i]);
	                board[j][i] = 0;
	            }
	            int idx = N - 1;
	            while (!q.empty())
	            {
	                int data = q.front();
	                q.pop();
	                if (board[idx][i] == 0)
	                    board[idx][i] = data;
	                else if (board[idx][i] == data)
	                {
	                    board[idx][i] *= 2;
	                    idx--;
	                }
	                else
	                {
	                    idx--;
	                    board[idx][i] = data;
	                }
	            }
	        }
	        break;
	    }
	}
	
	
	
	void DFS(int cnt) //방향조합 
	
	{
	    if (cnt == 5) //하나의 경우의수 다 돌았으면. 
	    {
	        for (int i = 0; i < N; i++)
	            for (int j = 0; j < N; j++)
	                maxBlock = max(maxBlock, board[i][j]); 
	        return;
	    }
	
	    int copyBoard[MAX][MAX]; //여기서 선언하는게 중요하지. 
	
	    //현 보드상태 저장해놓고 //checking 하는거랑 같은 원리 
	    for (int i = 0; i < N; i++) 
	        for (int j = 0; j < N; j++)
	            copyBoard[i][j] = board[i][j];
	
	    for (int i = 0; i < 4; i++)
	    {
	        shift(i); //기울이기 이런식으로
	        DFS(cnt + 1);
	        //shift(i)하기 전 상태로 원상복구.
	        for (int i = 0; i < N; i++)
	            for (int j = 0; j < N; j++)
	                board[i][j] = copyBoard[i][j];
	    }
	}
	
	
	int main(void)
	{
	
	    ios_base::sync_with_stdio(false);
	
	    cin >> N;
	    for (int i = 0; i < N; i++) {
	
	        for (int j = 0; j < N; j++) {
	            cin >> board[i][j];
	
	        }
	    }
	
	    DFS(0);
	    cout << maxBlock << endl;
	    return 0;
	
	}
    '''

