---
layout: post
title:  "[삼성 SW 역량테스트] 16235 나무재태크"
subtitle:   "[삼성 SW 역량테스트] 16235"
categories: algorithm language 
tags: algorithm language C++
comments: true
---


## 문제 
---
<https://www.acmicpc.net/problem/16235> 나무 재태크

deque는 vector의 일종이다. 이름땜에 자꾸 큐처럼 사용하려구 함...; ㅠㅠ 
deque를 저렇게 맵처럼 2차원 연결리스트로 잡는게 최선인가 싶다.(시험장가서 저런식으로 안풀거같아서,,구조체로 큐에 넣어버릴듯)

## 코드
---



    '''c
	#include <string>
	#include <vector>
	#include <algorithm>
	#include <iostream>
	#include <fstream>
	#include <queue>
	using namespace std;
	//<이게 덱큐구나>
	int map[11][11], ch[11][11];
	
	int dir[8][2] = { {-1, -1}, {-1, 0}, {-1, +1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1} };
	
	struct State {
		int tree_size, live;
		State(int a, int b) {
	
			tree_size = a;
			live = b;
		}
	
	};
	bool compare(State& x, State& y) {
		return x.tree_size < y.tree_size;
	}
	int main() {
	
		ios_base::sync_with_stdio(false);
		ifstream cin;
	
		deque<State> tree[11][11];
		cin.open("input.txt");
		int N, M, K, a, b, c;
		cin >> N >> M >> K;
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) {
				map[i][j]=5; //map에 양분 저장
			}
		}
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) {
				cin >> ch[i][j]; //map에 양분 저장
			}
		}
		for (int i = 1; i <= M; i++) {
			cin >> a >> b >> c;
			tree[a][b].push_back({ c, 1 }); //나무 저장
		}
		int time = 1;
		
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) sort(tree[i][j].begin(), tree[i][j].end(), compare);
		}
	
		while (K--) {
			//봄
			
			for (int i = 1; i <= N; i++) {
				for (int j = 1; j <= N; j++) {
					for (int k = 0; k < tree[i][j].size(); k++) {
						if (map[i][j] >= tree[i][j][k].tree_size && tree[i][j][k].live == 1) {
							map[i][j] -= tree[i][j][k].tree_size;
							tree[i][j][k].tree_size++;
						}
						else tree[i][j][k].live = 0;
					}
				}
			}
			for (int i = 1; i <= N; i++) {
				for (int j = 1; j <= N; j++) {
					int age = 0;
					if (tree[i][j].empty() == true) continue;
					State t = tree[i][j].back();
					while (t.live == false) {
						age += t.tree_size / 2;
						tree[i][j].pop_back();
						if (tree[i][j].empty()) break;
						t = tree[i][j].back(); //뒤에서부터 죽은애 빼기.
					}
					map[i][j] += age;
				
				}
			}
	
	
			for (int i = 1; i <= N; i++) {
				for (int j = 1; j <= N; j++) {
	
					for (int k = 0; k < tree[i][j].size(); k++) {
						if (tree[i][j][k].tree_size % 5 == 0) {
							for (int tmp = 0; tmp < 8; tmp++) {
								int xx = i + dir[tmp][0];
								int yy = j + dir[tmp][1];
								if (xx<1 || xx>N || yy<1 || yy>N) continue;
								tree[xx][yy].push_front({ 1, 1 });
							}
	
						}
					}
				}
			}
	
			for (int i = 1; i <= N; i++) {
				for (int j = 1; j <= N; j++) {
					map[i][j] += ch[i][j];
				}
			}
			
		}
	
		int trees=0;
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) {
				trees += tree[i][j].size();
			}
		}
		cout << trees<<endl;
	
		
		return 0;
	}

    '''

