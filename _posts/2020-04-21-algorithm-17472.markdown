---
layout: post
title:  "[삼성 a형 기출] 17472"
subtitle:   "[삼성 a형 기출] 17472"
categories: algorithm language 
tags: algorithm language C++
comments: true
---


## 문제 
---

<https://www.acmicpc.net/problem/17472> 다리만들기2

1. 가능한 다리를 모두 만들고(최솟값으로)
2. union&find MST를 사용한다.

다리를 만들 두 섬을 구하는건 따로 DFS조합이 필요없다. 그냥 이중포문 돌리면 된다. 
그리고... int DFS함수에서... 모든경우에 return 이 있어야한다. void DFS만 쓰다가 int DFS 쓰니까 DFS새로 부를때 return DFS 안해고 그냥 DFS()로 재귀 호출해서 런타임에러 계속 났다. ㅠㅠ 악. 

## 코드
---



    '''c
	#include <bits/stdc++.h>

	using namespace std;
	#define INF 1000
	#define ISLAND_MAX 6 + 1
	#define MAX 10
	int unf[ISLAND_MAX];
	
	int board[MAX][MAX], ch[MAX][MAX];
	int N, M, ans;
	int dir[4][2] = { {-1, 0}, {0, 1}, {1, 0}, {0, -1} };
	int tmp_ans= INF;
	vector<pair<int, int> > Area_Pos[7];
	int name = 1;
	
	struct Bridge {
	    int start, end, distance;
	    Bridge(int x, int y, int z) {
	        start = x;
	        end = y;
	        distance = z;
	    }
	    bool operator<(const Bridge& bb)const {
	
	        return distance < bb.distance; //오름차순은 최소힙의 반대군요
	    }
	};
	
	
	
	
	int Find(int x)
	{
	    if (unf[x] == x) return x;
	    else return unf[x] = Find(unf[x]); //이러면 될걸
	}
	
	void Union(int x, int y)
	{
	    int xx = Find(x); //xx, yy = 부모
	    int yy = Find(y);
	
	    if (xx != yy) unf[xx] = yy; // 부모가 다르면-> 부모 체인지 
	
	}

	
	int DFS(int x, int y, int d, int cnt, int arr) {
	    
	    int nx = x + dir[d][0];
	    int ny = y + dir[d][1];
	    if (nx < 0 || nx >= N || ny < 0 || ny >= M)  return INF;
	    if (board[nx][ny] == 0) return DFS(nx, ny, d, cnt + 1, arr);
	    else if (board[nx][ny] != 0 && board[nx][ny] == arr && cnt > 1) {
	        
	         return cnt;
	       
	    }
	    else return INF;
	}
	int getDistance_DFS(vector<pair<int, int> >  v1, int arrive) {
	
	    int dist_tmp = INF;
	    for (int i = 0; i < v1.size(); i++) {
	        int x = v1[i].first;
	        int y = v1[i].second;
	        for (int j = 0; j < 4; j++) {
	            dist_tmp = min(DFS(x, y, j, 0, arrive), dist_tmp);  
	        }
	        
	    }
	    if (dist_tmp != INF) return dist_tmp;
	    else return INF;
	}
	
	int main(void)
	{
	    ios_base::sync_with_stdio(false);
	
	    cin >> N >> M;
	    for (int i = 0; i < N; i++) {
	        for (int j = 0; j < M; j++) {
	            cin >> board[i][j];
	            if (board[i][j]) board[i][j] = -1; //1이면 -1로 바꿔줌
	        }
	    }
	
	    for (int i = 0; i < N; i++) {
	        for (int j = 0; j < M; j++) {
	            if (board[i][j] == -1) {
	                queue<pair<int, int> > Q;
	                Q.push({ i, j });
	                ch[i][j] = 1;
	                board[i][j] = name;
	                Area_Pos[name].push_back({ i, j });
	                while (!Q.empty()) {
	                    pair<int, int> tmp = Q.front();
	                    Q.pop();
	                    for (int k = 0; k < 4; k++) {
	                        int xx = tmp.first + dir[k][0];
	                        int yy = tmp.second + dir[k][1];
	                        if (xx >= 0 && yy >= 0 && xx < N && yy < M && board[xx][yy] == -1 && ch[xx][yy] == 0) {
	                            Q.push({ xx, yy });
	                            ch[xx][yy] = 1;
	                            board[xx][yy] = name;
	                            Area_Pos[name].push_back({ xx, yy });
	                        }
	                    }
	                }
	                name++;
	            }
	        }
	    }//naming완료 지금 섬이 5개면 name값은 6임. 
	
	    vector<Bridge> Node;
	
	    for (int i = 1; i < name; i++) {
	        for (int j = i + 1; j < name; j++) {
	            
	            int dist = getDistance_DFS(Area_Pos[i], j);
	            //int dist = getDistance(Area_Pos[i], Area_Pos[j]); //dist= 섬간의 최소거리
	           
	            if (dist != INF) Node.push_back({ i, j, dist });
	
	        }
	       
	    }
	    //위에꺼 한 다음에 union&find 최소스패닝트리
	    sort(Node.begin(), Node.end()); //이게 안되나? 왜 구조체하면 sort안되지 
	
	    for (int i = 1; i < name; i++) unf[i] = i;
	
	    for (int i = 0; i < Node.size(); i++) //간선개수
	    {
	        int Node1 = Node[i].start;
	        int Node2 = Node[i].end;
	        int fa = Find(Node1);
	        int fb = Find(Node2);
	        if (fa != fb)
	        {
	            Union(Node1, Node2);
	            ans = ans + Node[i].distance;
	
	        }
	    }
	    for (int i = 1; i < name; i++) {
	        if (Find(i) != Find(1)) {
	            ans = -1;
	        }
	    }
	    cout << ans;
	
	    return 0;
	}
    '''

