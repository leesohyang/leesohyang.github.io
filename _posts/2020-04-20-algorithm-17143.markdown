---
layout: post
title:  "[삼성 SW 역량테스트] 17143"
subtitle:   "[삼성 SW 역량테스트] 17143"
categories: algorithm language 
tags: algorithm language C++
comments: true
---


## 문제 
---

<https://www.acmicpc.net/problem/17143> 낚시왕

내가 싫어하는 시뮬레이션...

**개체가 여러마리면 deque/vector<구조체> board[][],   board[i][j].push_back({}) << 이렇게 잡는게 편하다.** ~~제발 유념해~~

+겹칠거 같으면 지역배열 하나 해서 거기다 저장하고 나중에 옮기면 됨. 
 
 
시간초과가 많이 났는데 상어 속력이 최대 10000이다. 그리고 상어 수는 최대 10000마리다. 속력만큼 포문 돌려서 한칸씩 이동하면 당연히 시간초과가 난다. 당연히. 항상 코드 짜기 전에 데이터 범위부터 확인하자. (포문 돌려도 되는데 구조체 쓰면 시간초과 나고, 구조체 안쓰면 거의 제한시간 꽉 채워서 돌아간다. 구조체 안쓰고 n차원 벡터 다루는건 좀 귀찮으니까...)

그래서 속력만큼 포문쓰지 않고 상어 이동하는 부분 구현하는게 젤 골치가 아팠다. 그니까... **박스에 리본을 감는 것**처럼 생각하면 된다. 한번 감으면 리본은 박스 폭 만큼 (-)된 길이를 가질거고(방향도 역으로 바뀌겠지), 리본이 튀어나오지 않을 만큼 짧아지면 while을 빠져나온다. 그리고 그때의 박스 폭 안의 값을 가지는 좌표에 상어정보를 임시배열에 업데이트 해준다. 마지막으로 한번 상어 이동타임이 끝나면 원래 배열에 임시배열 값을 복사한다.



## 코드
---



    '''c
	#include <string>
	#include <vector>
	#include <algorithm>
	#include <iostream>
	#include <fstream>
	#include <queue>
	
	using namespace std;
	
	int r, c, m;
	
	int dir[4][2] = { {-1, 0}, {1, 0}, {0, 1}, {0, -1} }; //위 아래 오른쪽 왼쪽
	
	typedef struct Fish {
	    int z, s, d;
	}Fish;
	
	Fish shark[101][101];
	int ans = 0;
	    
	void Fisher(int n) {
	    for (int j = 1; j <= r; j++) {
	        if (shark[j][n].z != 0) {//항상 하나만 들어있음
	            ans += shark[j][n].z;
	            shark[j][n] = { 0 };
	            return;
	        }
	    }
	    return;
	}
	
	void move(void) {
	        
	    Fish brr[101][101] = { 0 };
	
	    for (int i = 1; i <= r; i++) {
	        for (int j = 1; j <= c; j++) {
	
	            if (shark[i][j].z != 0) {
	
	                int ix = i, iy = j, z = shark[i][j].z, s = shark[i][j].s, d = shark[i][j].d;
	                
	                int nx, ny;
	                
	                while (1) {
	                    nx = ix + s * dir[d - 1][0];
	                    ny = iy + s * dir[d - 1][1];
	                    if (nx <= r && ny <= c && ny > 0 && nx > 0) break;
	                    if (d == 1 && nx <= 0) { s -= ix - 1;  ix = 1; d = 2; }
	                    if (d == 2 && nx > r) { s -= r - ix; ix = r; d = 1; }
	                    if (d == 3 && ny > c) { s -= c - iy; iy = c; d = 4; }
	                    if (d == 4 && ny <= 0) { s -= iy - 1; iy = 1; d = 3; }
	                }
	               
	                if (brr[nx][ny].z != 0) { //내가 더 크면 덮어버리는것.
	                    if (brr[nx][ny].z < shark[i][j].z) {
	                        brr[nx][ny] = { shark[i][j].z, shark[i][j].s, d };
	                    }
	                }
	                else brr[nx][ny] = { shark[i][j].z, shark[i][j].s, d };
	            }
	
	        }
	    }
	
	    for (int i = 1; i <= r; i++) {
	        for (int j = 1; j <= c; j++) {
	            shark[i][j] = brr[i][j];
	            brr[i][j].z = 0;
	            brr[i][j].d = 0;
	            brr[i][j].s = 0;
	        }
	    }
	
	
	
	}
	
	int main(void) {
	    ifstream cin;
	    cin.open("input.txt");
	    cin >> r >> c >> m;
	
	    for (int i = 0; i < m; i++) {
	        int a, b, c, d, e;
	        cin >> a >> b >> c >> d >> e;
	
	        shark[a][b] = { e, c, d };
	    }
	
	    for (int i = 1; i <= c; i++) {
	        Fisher(i);
	        move();
	      
	    }
	
	    cout << ans << endl;
	}
    '''

