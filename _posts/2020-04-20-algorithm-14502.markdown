---
layout: post
title:  "[삼성 SW 역량테스트] 14502"
subtitle:   "[삼성 SW 역량테스트] 14502"
categories: algorithm language 
tags: algorithm language C++
comments: true
---


## 문제 
---

<https://www.acmicpc.net/problem/14502> 연구소

그냥 DFS+BFS 조합 문제이다. 예전에 풀었던 연구소2 보다 BFS부분이 간단하다. 

테스트 케이스 하나가 비주얼스튜디오에서 출력되는데 5초걸리길래 시간초과 뜨려나 하고 제출했는데 맞았다 ㅇㅅㅇ 심지어 시간도 얼마 안걸림. 왜지 

+바이러스 큐를 BFS 돌때마다 갱신해 줘야하는걸 까먹고 한 삼십분 잡아먹었다. 

## 코드
---



    '''c
	#include <string>
	#include <vector>
	#include <algorithm>
	#include <iostream>
	#include <fstream>
	#include <queue>
	
	using namespace std;
	int dir[4][2] = { {0, 1}, {0, -1}, {-1, 0}, {1, 0} };
	int N, M;
	struct wall {
	    int x, y;
	};
	int board[10][10];
	vector<wall> W;
	queue<wall> Q;
	int ans = 0;
	int BFS() {
	
	   
	    int sum = 0;
	    int board_tmp[10][10];
	    for (int i = 0; i < N; i++) {
	        for (int j = 0; j < M; j++) {
	            board_tmp[i][j] = board[i][j]; //복사
	            if (board[i][j] == 2) Q.push({ i, j });
	        }
	    }
	    while (!Q.empty()) {
	        int size = Q.size();
	
	        while (size--) {
	
	            wall tmp = Q.front();
	            Q.pop();
	            for (int i = 0; i < 4; i++) {
	                int xx = tmp.x + dir[i][0];
	                int yy = tmp.y + dir[i][1];
	                while (1) {
	                    if (xx >= N || xx < 0 || yy >= M || yy < 0 || board_tmp[xx][yy] != 0) break;
	                    board_tmp[xx][yy] = 2;
	                    Q.push({ xx, yy });
	                    xx += dir[i][0];
	                    yy += dir[i][1];
	                }
	            }
	        }
	    }
	    for (int i = 0; i < N; i++) {
	        for (int j = 0; j < M; j++) {
	            if (board_tmp[i][j] == 0) sum++;
	            else board_tmp[i][j] = 0;
	        }
	    }
	    
	    return sum;
	    
	}
	void DFS(int v, int cnt) {
	    if (cnt==3) {
	        //여기서 BFS
	        ans = max(ans, BFS());
	        return;
	    }
	    else {
	        for (int i = v; i < W.size(); i++) {
	            board[W[i].x][W[i].y] = 1;
	            DFS(i + 1, cnt+1);
	            board[W[i].x][W[i].y] = 0;
	        }
	    }
	}
	
	int main(void) {
	    ifstream cin;
	    cin.open("input.txt");
	
	    cin >> N>>M;
	    for (int i = 0; i < N; i++) {
	        for (int j = 0; j < M; j++) {
	            int a;
	            cin >> a;
	            board[i][j] = a;
	            if (a == 0) { //벽 놓을수 있는 자리
	                W.push_back({ i, j });
	            }
	
	        }
	    }
	   
	    DFS(0, 0);
	
	    cout << ans << endl;
	}
    '''

